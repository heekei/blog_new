(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{234:function(r,n,e){"use strict";e.r(n);var s=e(2),t=Object(s.a)({},(function(){var r=this,n=r.$createElement,e=r._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"docker-总结：《docker-从入门到实战-黄靖钧-》"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-总结：《docker-从入门到实战-黄靖钧-》"}},[r._v("#")]),r._v(" Docker 总结：《Docker 从入门到实战(黄靖钧)》")]),r._v(" "),e("h1",{attrs:{id:"观其大纲"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#观其大纲"}},[r._v("#")]),r._v(" 观其大纲")]),r._v(" "),e("p",[r._v("第一篇 容器技术与 Docker 概念"),e("br"),r._v("\n1 认识容器技术"),e("br"),r._v("\n2 Docker 基本概念"),e("br"),r._v("\n3 安装和测试 Docker"),e("br"),r._v("\n第二篇 Docker 基础知识"),e("br"),r._v("\n4 Docker 基础"),e("br"),r._v("\n5 Docker 镜像"),e("br"),r._v("\n6 Dockerfile 文件"),e("br"),r._v("\n7 Docker 仓库"),e("br"),r._v("\n8 Docker 容器"),e("br"),r._v("\n9 数据卷"),e("br"),r._v("\n10 网络管理"),e("br"),r._v("\n第三篇 Docker 进阶实战"),e("br"),r._v("\n11 操作系统"),e("br"),r._v("\n12 编排工具-compose"),e("br"),r._v("\n13 web 服务器与应用"),e("br"),r._v("\n14 数据库"),e("br"),r._v("\n15 编程语言"),e("br"),r._v("\n16 Docker API"),e("br"),r._v("\n17 私有仓库"),e("br"),r._v("\n18 集群网络"),e("br"),r._v("\n19 容器安全"),e("br"),r._v("\n20 Docker 网络生态")]),r._v(" "),e("h1",{attrs:{id:"大纲细节"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#大纲细节"}},[r._v("#")]),r._v(" 大纲细节")]),r._v(" "),e("p",[r._v("第 1 篇 容器技术与 Docker 概念"),e("br"),r._v("\n第 1 章 容器技术"),e("br"),r._v("\n1.1 什么是容器"),e("br"),r._v("\n1.2 容器技术的前世今生"),e("br"),r._v("\n1.3 容器的原理"),e("br"),r._v("\n1.4 容器云"),e("br"),r._v("\n1.5 容器与 Docker"),e("br"),r._v("\n1.6 本章小结"),e("br"),r._v("\n第 2 章 Docker 简介"),e("br"),r._v("\n2.1 什么是 Docker"),e("br"),r._v("\n2.2 Docker 的功能及优缺点"),e("br"),r._v("\n2.3 Docker 和虚拟机"),e("br"),r._v("\n2.4 Docker 与 runC"),e("br"),r._v("\n2.5 Docker 基本架构"),e("br"),r._v("\n2.6 本章小结"),e("br"),r._v("\n第 3 章 安装 Docker"),e("br"),r._v("\n3.1 Linux 系统"),e("br"),r._v("\n3.2 Windows 与 Mac OS 系统"),e("br"),r._v("\n3.3 二进制安装"),e("br"),r._v("\n3.4 本章小结"),e("br"),r._v("\n第 2 篇 Docker 基础知识"),e("br"),r._v("\n第 4 章 Docker 基础"),e("br"),r._v("\n4.1 Docker 基本操作"),e("br"),r._v("\n4.2 启动第一个 Docker 容器"),e("br"),r._v("\n4.3 构建第一个 Docker 镜像"),e("br"),r._v("\n4.4 本章小结"),e("br"),r._v("\n第 5 章 Docker 镜像"),e("br"),r._v("\n5.1 认识镜像"),e("br"),r._v("\n5.2 创建镜像"),e("br"),r._v("\n5.3 导出和导入镜像"),e("br"),r._v("\n5.4 发布镜像"),e("br"),r._v("\n5.5 删除镜像"),e("br"),r._v("\n5.6 Docker 镜像扩展"),e("br"),r._v("\n5.7 本章小结"),e("br"),r._v("\n第 6 章 Dockerfile 文件"),e("br"),r._v("\n6.1 Dockerfile 基本结构"),e("br"),r._v("\n6.2 Dockerfile 指令"),e("br"),r._v("\n6.3 镜像构建实战"),e("br"),r._v("\n6.4 本章小结"),e("br"),r._v("\n第 7 章 Docker 仓库"),e("br"),r._v("\n7.1 官方仓库 Docker Hub"),e("br"),r._v("\n7.2 国内镜像仓库"),e("br"),r._v("\n7.3 私有仓库"),e("br"),r._v("\n7.4 Registry 原理"),e("br"),r._v("\n7.5 本章小结"),e("br"),r._v("\n第 8 章 Docker 容器"),e("br"),r._v("\n8.1 容器基本操作"),e("br"),r._v("\n8.2 进入容器内部"),e("br"),r._v("\n8.3 导出和导入容器"),e("br"),r._v("\n8.4 容器结构"),e("br"),r._v("\n8.5 本章小结"),e("br"),r._v("\n第 9 章 数据卷"),e("br"),r._v("\n9.1 数据卷是什么"),e("br"),r._v("\n9.2 为容器挂载数据卷"),e("br"),r._v("\n9.3 备份、恢复、迁移数据卷"),e("br"),r._v("\n9.4 容器数据卷扩展"),e("br"),r._v("\n9.5 本章小结"),e("br"),r._v("\n第 10 章 网络管理"),e("br"),r._v("\n10.1 Docker 网络基础"),e("br"),r._v("\n10.2 Docker 网络模式"),e("br"),r._v("\n10.3 Docker 网络配置"),e("br"),r._v("\n10.4 本章小结"),e("br"),r._v("\n第 3 篇 Docker 进阶实战"),e("br"),r._v("\n第 11 章 操作系统"),e("br"),r._v("\n11.1 Alpine 发行版"),e("br"),r._v("\n11.2 Busybox 发行版"),e("br"),r._v("\n11.3 Debian/Ubuntu 发行版"),e("br"),r._v("\n11.4 CentOS/Fedora 发行版"),e("br"),r._v("\n11.5 CoreOS 发行版"),e("br"),r._v("\n11.6 RancherOS 发行版"),e("br"),r._v("\n11.7 本章小结"),e("br"),r._v("\n第 12 章 编排工具 Compose"),e("br"),r._v("\n12.1 安装 Docker Compose"),e("br"),r._v("\n12.2 Compose 命令基础"),e("br"),r._v("\n12.3 Compose 配置文件"),e("br"),r._v("\n12.4 Compose 实战"),e("br"),r._v("\n12.5 本章小结"),e("br"),r._v("\n第 13 章 Web 服务器与应用"),e("br"),r._v("\n13.1 Apache 服务器"),e("br"),r._v("\n13.2 Nginx 服务器"),e("br"),r._v("\n13.3 Tomcat 服务器"),e("br"),r._v("\n13.4 其他 Web 服务器"),e("br"),r._v("\n13.5 本章小结"),e("br"),r._v("\n第 14 章 数据库"),e("br"),r._v("\n14.1 MySQL 数据库"),e("br"),r._v("\n14.2 PostgreSQL 数据库"),e("br"),r._v("\n14.3 Redis 数据库"),e("br"),r._v("\n14.4 MongoDB 数据库"),e("br"),r._v("\n14.5 其他"),e("br"),r._v("\n14.6 本章小结"),e("br"),r._v("\n第 15 章 编程语言"),e("br"),r._v("\n15.1 C/C++语言"),e("br"),r._v("\n15.2 Golang 语言"),e("br"),r._v("\n15.3 Java 语言"),e("br"),r._v("\n15.4 JavaScript（Node.js）语言"),e("br"),r._v("\n15.5 PHP 语言"),e("br"),r._v("\n15.6 Python 语言"),e("br"),r._v("\n15.7 Swift 语言"),e("br"),r._v("\n15.8 本章小结"),e("br"),r._v("\n第 16 章 Docker API 介绍"),e("br"),r._v("\n16.1 认识 Docker API"),e("br"),r._v("\n16.2 Docker Remote API 介绍"),e("br"),r._v("\n16.3 其他 API"),e("br"),r._v("\n16.4 本章小结"),e("br"),r._v("\n第 17 章 私有仓库"),e("br"),r._v("\n17.1 Docker Registry 介绍"),e("br"),r._v("\n17.2 认证与前端"),e("br"),r._v("\n17.3 企业级私有仓库 Harbor"),e("br"),r._v("\n17.4 私有仓库前端授权工具 Portus"),e("br"),r._v("\n17.5 本章小结"),e("br"),r._v("\n第 18 章 集群网络"),e("br"),r._v("\n第 19 章 Docker 安全")]),r._v(" "),e("hr"),r._v(" "),e("h1",{attrs:{id:"熟知概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#熟知概念"}},[r._v("#")]),r._v(" 熟知概念")]),r._v(" "),e("p",[r._v("第 1 篇 容器技术与 Docker 概念"),e("br"),r._v("\n第 1 章 容器技术")]),r._v(" "),e("blockquote",[e("ul",[e("li",[e("p",[r._v("什么是容器"),e("br"),r._v("\n容器映像是一个软件的轻量级独立可执行软件包，包含运行它所需的一切：代码，运行时，系统工具，系统库，设置。不管环境如何，集装箱化软件都可以运行相同的 Linux 和 Windows 应用程序。容器将软件与其周围环境隔离开来，例如开发环境和登台环境之间的差异，并有助于减少在同一基础架构上运行不同软件的团队之间的冲突。")]),r._v(" "),e("p",[e("img",{attrs:{src:"invalid-url.png",alt:""}})]),r._v(" "),e("p",[r._v("what is a container?")])])])]),r._v(" "),e("blockquote",[e("p",[r._v("LXC"),e("br"),r._v("\nLinux Container 容器是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源。")])]),r._v(" "),e("blockquote",[e("p",[r._v("容器技术主要包括 Cgroup 和 Namespace 这两个内核特性。"),e("br"),r._v(" "),e("strong",[r._v("Cgroup")]),e("br"),r._v("\nCgroup 是 control group，又称为控制组，它主要是做资源控制。原理是将一组进程放在放在一个控制组里，通过给这个控制组分配指定的可用资源，达到控制这一组进程可用资源的目的。"),e("br"),r._v(" "),e("strong",[r._v("Namespace")]),e("br"),r._v("\nNamespace 又称为命名空间，它主要做访问隔离。其原理是针对一类资源进行抽象，并将其封装在一起提供给一个容器使用，对于这类资源，因为每个容器都有自己的抽象，而他们彼此之间是不可见的，所以就可以做到访问隔离。")])]),r._v(" "),e("blockquote",[e("p",[r._v("对于 Linux 容器的最小组成，除了上面两个抽象的技术概念还不够，完整的容器可以用以下公示描述：")])]),r._v(" "),e("h4",{attrs:{id:"容器-cgroup-namespace-rootfs-容器引擎（用户态工具）。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器-cgroup-namespace-rootfs-容器引擎（用户态工具）。"}},[r._v("#")]),r._v(" 容器=Cgroup+Namespace+rootfs+容器引擎（用户态工具）。")]),r._v(" "),e("blockquote",[e("p",[r._v("其中各项功能分别为："),e("br"),r._v("\nCgroup：资源控制；"),e("br"),r._v("\nNamespace：访问隔离；"),e("br"),r._v("\nrootfs：文件系统隔离；"),e("br"),r._v("\n容器引擎：生命周期控制；")])]),r._v(" "),e("p",[r._v("第 2 章 Docker 简介"),e("br"),r._v("\n2.1 什么是 Docker")]),r._v(" "),e("blockquote",[e("p",[r._v("Docker 是一个用于开发、迁移、运行的开发平台。它使你能够将你的应用程序从基础架构中分离，从而可以快速交付。使用 Docker，你可以以与管理应用程序相同的方式来管理这些基础架构。使用 Docker 的方法，进行快速开发，测试，并可以显著的减少编写代码和运行之间的时间延迟。"),e("br"),r._v("\n就像官网上说的：Build，Ship，and Run Any App, Anywhere")])]),r._v(" "),e("blockquote",[e("p",[r._v("Docker 基本架构"),e("br"),r._v("\ndocker 主要有以下几部分组成：")]),r._v(" "),e("blockquote",[e("p",[r._v("Docker Client 客户端"),e("br"),r._v("\nDocker daemon 守护进程"),e("br"),r._v("\nDocker Image 镜像"),e("br"),r._v("\nDocker Container 容器"),e("br"),r._v("\nDocker Registry 仓库")])])]),r._v(" "),e("blockquote",[e("ul",[e("li",[e("p",[r._v("客户端和守护进程："),e("br"),r._v("\n1 Docker 是 C/S（客户端 client-服务器 server）架构模式。"),e("br"),r._v("\ndocker 通过客户端连接守护进程，通过命令向守护进程发出请求，守护进程通过一系列的操作返回结果。"),e("br"),r._v("\n2 docker 客户端可以连接本地或者远程的守护进程。"),e("br"),r._v("\n3 docker 客户端和服务器通过 socket 或 RESTful API 进行通信。")]),r._v(" "),e("p",[e("img",{attrs:{src:"invalid-url.png",alt:""}})]),r._v(" "),e("p",[r._v("docker 架构")])])])]),r._v(" "),e("p",[r._v("第 3 章 安装 Docker")]),r._v(" "),e("p",[r._v("第 2 篇 Docker 基础知识"),e("br"),r._v("\n第 4 章 Docker 基础")]),r._v(" "),e("h2",{attrs:{id:"常用命令表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令表"}},[r._v("#")]),r._v(" 常用命令表")]),r._v(" "),e("blockquote",[e("ul",[e("li",[r._v("操作 命令"),e("br"),r._v("\n实例")])])]),r._v(" "),e("h4",{attrs:{id:"通用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通用命令"}},[r._v("#")]),r._v(" 通用命令")]),r._v(" "),e("ul",[e("li",[r._v("查看 docker 版本 docker version"),e("br"),r._v("\ndocker version")]),r._v(" "),e("li",[r._v("查看 docker 信息 docker info"),e("br"),r._v("\ndocker info")]),r._v(" "),e("li",[r._v("查看某命令 help 信息 docker help [command]"),e("br"),r._v("\ndocker help attach")]),r._v(" "),e("li",[r._v("查看 docker help 信息 docker --help"),e("br"),r._v("\ndocker --help")])]),r._v(" "),e("h4",{attrs:{id:"容器操作命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器操作命令"}},[r._v("#")]),r._v(" 容器操作命令")]),r._v(" "),e("ul",[e("li",[r._v("创建 container docker create"),e("br"),r._v("\ndocker create chenhengjie123/xwalkdriver")]),r._v(" "),e("li",[r._v("创建并运行 container docker run"),e("br"),r._v("\ndocker run chenhengjie123/xwalkdriver /bin/bash")]),r._v(" "),e("li",[r._v("创建并运行 container 后进入其 bash 控制台"),e("br"),r._v("\ndocker run -t -i image /bin/bash"),e("br"),r._v("\ndocker run -t -i ubuntu /bin/bash")]),r._v(" "),e("li",[r._v("创建并运行 container 并让其在后台运行，并端口映射"),e("br"),r._v("\ndocker run -p [port in container]:[port in physical system] -d [image] [command]"),e("br"),r._v("\ndocker run -p 5000:5000 -d training/webapp python app.py")]),r._v(" "),e("li",[r._v("查看正在运行的所有 container 信息 docker ps"),e("br"),r._v("\ndocker ps")]),r._v(" "),e("li",[r._v("查看最后创建的 container docker ps -l"),e("br"),r._v("\ndocker ps -l")]),r._v(" "),e("li",[r._v("查看所有 container ，包括正在运行和已经关闭的 docker ps -a"),e("br"),r._v("\ndocker ps -a")]),r._v(" "),e("li",[r._v("输出指定 container 的 stdout 信息（用来看 log ，效果和 tail -f 类似，会实时输出。）"),e("br"),r._v("\ndocker logs -f [container]"),e("br"),r._v("\ndocker logs -f nostalgic_morse"),e("br"),r._v(" "),e("strong",[r._v('补充 docker logs -f -t --since="2017-05-01" --tail=10 edu_web_01')])]),r._v(" "),e("li",[r._v("获取 container 指定端口映射关系 docker port [container] [port]"),e("br"),r._v("\ndocker port nostalgic_morse 5000")]),r._v(" "),e("li",[r._v("查看 container 进程列表 docker top [container]"),e("br"),r._v("\ndocker top nostalgic_morse")]),r._v(" "),e("li",[r._v("查看 container 详细信息 docker inspect [container]"),e("br"),r._v("\ndocker inspect nostalgic_morse")]),r._v(" "),e("li",[r._v("停止 continer docker stop [container]"),e("br"),r._v("\ndocker stop nostalgic_morse")]),r._v(" "),e("li",[r._v("强制停止 container docker kill [container]"),e("br"),r._v("\ndocker kill nostalgic_morse")]),r._v(" "),e("li",[r._v("启动一个已经停止的 container docker start [container]"),e("br"),r._v("\ndocker start nostalgic_morse")]),r._v(" "),e("li",[r._v("重启 container (若 container 处于关闭状态，则直接启动)"),e("br"),r._v("\ndocker restart [container]"),e("br"),r._v("\ndocker restart nostalgic_morse")]),r._v(" "),e("li",[r._v("删除 container docker rm [container]"),e("br"),r._v("\ndocker rm nostalgic_morse")])]),r._v(" "),e("p",[r._v("注意：命令中需要指定 container 时，既可使用其名称，也可使用其 id 。")]),r._v(" "),e("h4",{attrs:{id:"镜像操作命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像操作命令"}},[r._v("#")]),r._v(" 镜像操作命令")]),r._v(" "),e("ul",[e("li",[r._v("从 container 创建 image， docker commit [container] [imageName]"),e("br"),r._v("\ndocker commit nostalgic_morse ouruser/sinatra:v2")]),r._v(" "),e("li",[r._v("从 Dockerfile 创建 image， docker build -t [imageName] [pathToFolder]"),e("br"),r._v("\ndocker build ouruser/sinatra:v3 .")]),r._v(" "),e("li",[r._v("查看本地所有 image， docker images"),e("br"),r._v("\ndocker images")]),r._v(" "),e("li",[r._v("显示镜像构建历史 docker history [OPTIONS] IMAGE"),e("br"),r._v("\ndocker history runoob/ubuntu:v3")]),r._v(" "),e("li",[r._v("在 registry 中搜索镜像 docker search [query]"),e("br"),r._v("\ndocker search ubuntu")]),r._v(" "),e("li",[r._v("从 registry 中获取镜像 （若无指定 tag 名称，则默认使用 latest 这个 tag）"),e("br"),r._v("\ndocker pull [imageName]"),e("br"),r._v("\ndocker pull ubuntu:14.04"),e("br"),r._v("\ndocker pull training/webapp")]),r._v(" "),e("li",[r._v("给 image 打 tag， docker tag [imageId] [imageName]"),e("br"),r._v("\ndocker tag 5db5f8471261 ouruser/sinatra:devel")]),r._v(" "),e("li",[r._v("把本地 image 上传到 registry 中 (此时会把所有 tag 都上传上去)"),e("br"),r._v("\ndocker push [imageName]"),e("br"),r._v("\ndocker push ouruser/sinatra")]),r._v(" "),e("li",[r._v("删除本地 image， docker rmi [image]"),e("br"),r._v("\ndocker rmi training/sinatra")])]),r._v(" "),e("p",[r._v("注意：注意：image 中没有指定 tag 名称的话默认使用 latest 这个 tag 。然而 latest 的含义和 VCS 中的 head 不一样，不是代表最新一个镜像，仅仅是代表 tag 名称为 latest 的镜像。若不存在 tag 名称为 latest 的镜像则会报错。")]),r._v(" "),e("p",[r._v("小结：")]),r._v(" "),e("blockquote",[e("p",[r._v("docker 虽然是一个虚拟化技术，但使用上却更像是在管理系统软件或者代码。里面的一些 ps，top，rm 命令让使用 Linux 命令的人感到十分亲切（虽然它们的语义有点不一样。。。），start，stop，restart 让你感觉像是在控制 service ，而 push，pull，commit，tag 又让你觉得像是在使用 git 。因此程序员会感到很亲切且容易上手。")])]),r._v(" "),e("blockquote",[e("p",[r._v("同时由于可以使用 Dockerfile 进行 image 的构建，且 docker hub 支持从 github 等地方自动根据 Dockerfile 进行构建，所以 docker 把运行环境也集成到 CI 中了。")])]),r._v(" "),e("blockquote",[e("p",[r._v("美中不足的是由于 docker 目前仅支持 linux 上的容器技术，因此它要在非 Linux 系统下运行必须加多一个虚拟机层。这会造成一些在 Linux 上运行不会出现的问题（ip 地址、硬件资源、文件映射等），同时由于基于 linux ，一些 windows 的程序会水土不服，泛用性比虚拟机差一些。")])]),r._v(" "),e("blockquote",[e("p",[r._v("但带来的好处是占用的系统资源低很多。一个只能开数个虚拟机的电脑一般能开数十个 container ，且 container 的启动时间一般在数秒内，比虚拟机快得多。另外，由于 docker 的 image 除了一些特殊的基础镜像外基本都是增量镜像，因此重复部分不会耗费额外的资源，所以几个看起来有数 g 的 image 如果里面使用的基础镜像有重复部分（大部分情况下都会有部分重复），那么它们实际占用空间将会小得多。")])]),r._v(" "),e("p",[r._v("第 5 章 Docker 镜像"),e("br"),r._v("\n5.1 认识镜像"),e("br"),r._v("\n镜像是 Docker 容器的基石，容器是镜像的运行实例，有了镜像才能启动容器。")]),r._v(" "),e("h5",{attrs:{id:"docker-镜像中的-base-镜像理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像中的-base-镜像理解"}},[r._v("#")]),r._v(" Docker 镜像中的 base 镜像理解")]),r._v(" "),e("ul",[e("li",[e("p",[r._v("base 镜像有两层含义："),e("br"),r._v("\n1 不依赖其他镜像，从 scratch 构建。"),e("br"),r._v("\n2 其他镜像可以之为基础进行扩展。"),e("br"),r._v("\n能称作 base 镜像的通常都是各种 Linux 发行版的 Docker 镜像，比如 Ubuntu, Debian, CentOS 等")])]),r._v(" "),e("li",[e("p",[r._v("base 镜像内容："),e("br"),r._v("\n下载镜像："),e("br"),r._v("\ndocker pull centos"),e("br"),r._v("\n查看镜像信息：docker images centos # 大约 200M"),e("br"),r._v("\nLinux 操作系统由内核空间和用户空间组成。如下图所示：")])])]),r._v(" "),e("p",[e("img",{attrs:{src:"invalid-url.png",alt:""}})]),r._v(" "),e("p",[r._v("linux 操作系统")]),r._v(" "),e("p",[r._v("rootfs")]),r._v(" "),e("ul",[e("li",[r._v("内核空间是 kernel，Linux 刚启动时会加载 bootfs 文件系统，之后 bootfs 会被卸载掉。")]),r._v(" "),e("li",[r._v("用户空间的文件系统是 rootfs，包含我们熟悉的 /dev, /proc, /bin 等目录。对于 base 镜像来说，底层直接用 Host 的 kernel，自己只需要提供 rootfs 就行了。")]),r._v(" "),e("li",[r._v("而对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令、工具和程序库就可以了。相比其他 Linux 发行版，CentOS 的 rootfs 已经算臃肿的了，alpine 还不到 10MB。")]),r._v(" "),e("li",[r._v("我们平时安装的 CentOS 除了 rootfs 还会选装很多软件、服务、图形桌面等，需要好几个 GB 就不足为奇了。")]),r._v(" "),e("li",[r._v("base 镜像提供的是最小安装的 Linux 发行版。")])]),r._v(" "),e("blockquote",[e("p",[r._v("base 镜像----提供了一个基本的操作系统环境，用户可以根据需要安装和配置软件"),e("br"),r._v("\nbase 镜像通常是各种 Linux 发行版的 Docker 镜像比如 ubuntu、Debian、centos 等。"),e("br"),r._v("\n**base 镜像只是在用户空间与发行版一致，kernel 版本与发行版是不同的。**比如说虚机系统是 ubuntu14.04，运行一个容器是 centos 系统的，那么 centos 使用的其实就是本虚机的 kernel。")])]),r._v(" "),e("p",[r._v("5.2 创建镜像")]),r._v(" "),e("blockquote",[e("p",[r._v("当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。")]),r._v(" "),e("ul",[e("li",[r._v("列出镜像列表"),e("br"),r._v("\n我们可以使用 docker images 来列出本地主机上的镜像。"),e("br"),r._v("\n我们如果要使用版本为 15.10 的 ubuntu 系统镜像来运行容器时，命令如下："),e("br"),r._v("\ndocker run -t -i ubuntu:15.10 /bin/bash")]),r._v(" "),e("li",[r._v("获取一个新的镜像"),e("br"),r._v("\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。"),e("br"),r._v("\ndocker pull ubuntu:13.10")]),r._v(" "),e("li",[r._v("查找镜像"),e("br"),r._v("\n我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： "),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://hub.docker.com/"),e("OutboundLink")],1),e("br"),r._v("\n我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。"),e("br"),r._v("\ndocker search httpd")]),r._v(" "),e("li",[r._v("创建镜像"),e("br"),r._v("\n当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。"),e("br"),r._v("\n1.从已经创建的容器中更新镜像，并且提交这个镜像"),e("br"),r._v("\n2.使用 Dockerfile 指令来创建一个新的镜像")])])]),r._v(" "),e("blockquote",[e("ul",[e("li",[r._v("更新镜像"),e("br"),r._v("\n更新镜像之前，我们需要使用镜像来创建一个容器。"),e("br"),r._v("\ndocker run -t -i ubuntu:15.10 /bin/bash"),e("br"),r._v("\n在运行的容器内使用命令进行更新:"),e("br"),r._v("\napt-get update"),e("br"),r._v("\n在完成操作之后，输入 exit 命令来退出这个容器。"),e("br"),r._v("\n此时 ID 为 e218edb10161 的容器，是按我们的需求更改的容器。我们可以通过命令 docker commit 来提交容器副本。"),e("br"),r._v('\ndocker commit -m="has update" -a="runoob" e218edb10161 runoob/ubuntu:v2')])]),r._v(" "),e("blockquote",[e("p",[r._v("各个参数说明："),e("br"),r._v("\n-m:提交的描述信息"),e("br"),r._v("\n-a:指定镜像作者"),e("br"),r._v("\ne218edb10161：容器 ID"),e("br"),r._v("\nrunoob/ubuntu:v2:指定要创建的目标镜像名")])]),r._v(" "),e("ul",[e("li",[r._v("构建镜像"),e("br"),r._v("\n我们使用命令 docker build ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。")])])]),r._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[r._v("runoob@runoob:~$ "),e("span",{pre:!0,attrs:{class:"token function"}},[r._v("cat")]),r._v(" Dockerfile \nFROM    centos:6.7\nMAINTAINER      Fisher "),e("span",{pre:!0,attrs:{class:"token string"}},[r._v('"fisher@sudops.com"')]),r._v("\n\nRUN     /bin/echo "),e("span",{pre:!0,attrs:{class:"token string"}},[r._v("'root:123456'")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("|")]),r._v("chpasswd\nRUN     "),e("span",{pre:!0,attrs:{class:"token function"}},[r._v("useradd")]),r._v(" runoob\nRUN     /bin/echo "),e("span",{pre:!0,attrs:{class:"token string"}},[r._v("'runoob:123456'")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("|")]),r._v("chpasswd\nRUN     /bin/echo -e "),e("span",{pre:!0,attrs:{class:"token string"}},[r._v('"LANG='),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[r._v('\\"')]),r._v("en_US.UTF-8"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[r._v('\\"')]),r._v('"')]),r._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),r._v("/etc/default/local\nEXPOSE  "),e("span",{pre:!0,attrs:{class:"token number"}},[r._v("22")]),r._v("\nEXPOSE  "),e("span",{pre:!0,attrs:{class:"token number"}},[r._v("80")]),r._v("\nCMD     /usr/sbin/sshd -D\n")])]),r._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[r._v("1")]),e("br"),e("span",{staticClass:"line-number"},[r._v("2")]),e("br"),e("span",{staticClass:"line-number"},[r._v("3")]),e("br"),e("span",{staticClass:"line-number"},[r._v("4")]),e("br"),e("span",{staticClass:"line-number"},[r._v("5")]),e("br"),e("span",{staticClass:"line-number"},[r._v("6")]),e("br"),e("span",{staticClass:"line-number"},[r._v("7")]),e("br"),e("span",{staticClass:"line-number"},[r._v("8")]),e("br"),e("span",{staticClass:"line-number"},[r._v("9")]),e("br"),e("span",{staticClass:"line-number"},[r._v("10")]),e("br"),e("span",{staticClass:"line-number"},[r._v("11")]),e("br")])]),e("blockquote",[e("p",[r._v("每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。"),e("br"),r._v("\nFROM，指定使用哪个镜像源"),e("br"),r._v("\nRUN 指令告诉 docker 在镜像内执行命令，安装了什么。"),e("br"),r._v("\n然后，我们使用 Dockerfile 文件，通过 docker build 命令来构建一个镜像。")])]),r._v(" "),e("h4",{attrs:{id:"docker-build-t-runoob-centos-6-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-build-t-runoob-centos-6-7"}},[r._v("#")]),r._v(" docker build -t runoob/centos:6.7 .")]),r._v(" "),e("blockquote",[e("p",[r._v("-t 指定要创建的目标镜像名"),e("br"),r._v("\n. Dockerfile 文件所在目录，可以指定 Dockerfile 的绝对路径"),e("br"),r._v("\n使用 docker images 查看创建的镜像")])]),r._v(" "),e("blockquote",[e("ul",[e("li",[r._v("设置镜像标签"),e("br"),r._v("\n我们可以使用 docker tag 命令，为镜像添加一个新的标签。"),e("br"),r._v("\ndocker tag 860c279d2fec runoob/centos:dev")])])]),r._v(" "),e("p",[r._v("5.3 导出和导入镜像")]),r._v(" "),e("ul",[e("li",[r._v("将镜像导出到文件"),e("br"),r._v("\ndocker export cbe3cb7799ed > update.tar")]),r._v(" "),e("li",[r._v("基于导出的文件创建一个新静像（导入镜像）"),e("br"),r._v("\ndocker import - update < update.tar"),e("br"),r._v("\n新镜像为 update")]),r._v(" "),e("li",[r._v("镜像的备份和恢复 save 和 load"),e("br"),r._v("\ndocker save -o update1.tar update"),e("br"),r._v("\n备份， -o 输出到文件"),e("br"),r._v("\ndocker rmi update"),e("br"),r._v("\ndocker load < update1.tar"),e("br"),r._v("\n恢复")])]),r._v(" "),e("p",[r._v("5.4 发布镜像"),e("br"),r._v("\n5.5 删除镜像"),e("br"),r._v("\n5.6 Docker 镜像扩展")]),r._v(" "),e("p",[r._v("第 6 章 Dockerfile 文件"),e("br"),r._v("\n6.1 Dockerfile 基本结构"),e("br"),r._v("\nDockerFile 分为四部分组成：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。例如：")]),r._v(" "),e("div",{staticClass:"language-ruby line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#第一行必须指定基于的基础镜像")]),r._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[r._v("From")]),r._v(" ubutu\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#维护者信息")]),r._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[r._v("MAINTAINER")]),r._v(" docker_user  docker_user"),e("span",{pre:!0,attrs:{class:"token variable"}},[r._v("@mail")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(".")]),r._v("com\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#镜像的操作指令")]),r._v("\napt"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("sourcelist"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(".")]),r._v("list\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[r._v("RUN")]),r._v(" apt"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("get update "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("&&")]),r._v(" apt"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("get install "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("y ngnix \n"),e("span",{pre:!0,attrs:{class:"token constant"}},[r._v("RUN")]),r._v(" echo "),e("span",{pre:!0,attrs:{class:"token string"}},[r._v('"\\ndaemon off;"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("etc"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("ngnix"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("nignix"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(".")]),r._v("conf\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#容器启动时执行指令")]),r._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[r._v("CMD")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("usr"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("sbin"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("ngnix\n")])]),r._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[r._v("1")]),e("br"),e("span",{staticClass:"line-number"},[r._v("2")]),e("br"),e("span",{staticClass:"line-number"},[r._v("3")]),e("br"),e("span",{staticClass:"line-number"},[r._v("4")]),e("br"),e("span",{staticClass:"line-number"},[r._v("5")]),e("br"),e("span",{staticClass:"line-number"},[r._v("6")]),e("br"),e("span",{staticClass:"line-number"},[r._v("7")]),e("br"),e("span",{staticClass:"line-number"},[r._v("8")]),e("br"),e("span",{staticClass:"line-number"},[r._v("9")]),e("br"),e("span",{staticClass:"line-number"},[r._v("10")]),e("br")])]),e("p",[r._v("6.2 Dockerfile 指令")]),r._v(" "),e("ul",[e("li",[r._v("1、From 指令"),e("br"),r._v("\nFrom 或者 From :"),e("br"),r._v("\nDockerFile 第一条必须为 From 指令。如果同一个 DockerFile 创建多个镜像时，可使用多个 From 指令（每个镜像一次）")]),r._v(" "),e("li",[r._v("2、MAINTAINER"),e("br"),r._v("\n格式为 maintainer ，指定维护者的信息")]),r._v(" "),e("li",[r._v("3、RUN"),e("br"),r._v("\n格式为 Run 或者 Run [“executable” ,”Param1”, “param2”]"),e("br"),r._v("\n前者在 shell 终端上运行，即/bin/sh -C，后者使用 exec 运行。例如：RUN [“/bin/bash”, “-c”,”echo hello”]"),e("br"),r._v("\n每条 run 指令在当前基础镜像执行，并且提交新镜像。当命令比较长时，可以使用“/”换行。")])]),r._v(" "),e("blockquote",[e("blockquote",[e("p",[r._v("exec 命令用于调用并执行指令的命令。exec 命令通常用在 shell 脚本程序中，可以调用其他的命令。如果在当前终端中使用命令，则当指定的命令执行完毕后会立即退出终端。"),e("br"),r._v("\n-c：在空环境中执行指定的命令。"),e("br"),r._v("\n例如：exec -c echo Linux C++")])])]),r._v(" "),e("ul",[e("li",[e("p",[r._v("4、CMD 指令"),e("br"),r._v("\n支持三种格式："),e("br"),r._v("\nCMD [“executable” ,”Param1”, “param2”]使用 exec 执行，推荐"),e("br"),r._v("\nCMD command param1 param2，在/bin/sh 上执行"),e("br"),r._v("\nCMD [“Param1”, “param2”] 提供给 ENTRYPOINT 做默认参数。"),e("br"),r._v(" "),e("strong",[r._v("每个容器只能执行一条 CMD 命令，多个 CMD 命令时，只最后一条被执行。")])])]),r._v(" "),e("li",[e("p",[r._v("5、EXPOSE"),e("br"),r._v("\n格式为 EXPOSE [……] 。"),e("br"),r._v("\n告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动 Docker 时，可以通过-P,主机会自动分配一个端口号转发到指定的端口。使用-P，则可以具体指定哪个本地端口映射过来"),e("br"),r._v("\n例如："),e("br"),r._v("\nEXPOSE 22 80 8443")])]),r._v(" "),e("li",[e("p",[r._v("6、ENV"),e("br"),r._v("\n格式为 ENV 。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。"),e("br"),r._v("\n例如"),e("br"),r._v("\nENV PG_MAJOR 9.3"),e("br"),r._v("\nENV PG_VERSION 9.3.4"),e("br"),r._v("\nRUN curl -SL "),e("a",{attrs:{href:"http://example.com/postgres-%24PG_VERSION.tar.xz",target:"_blank",rel:"noopener noreferrer"}},[r._v("http://example.com/postgres-$PG_VERSION.tar.xz"),e("OutboundLink")],1),r._v(" | tar -xJC /usr/src/postgress && ……"),e("br"),r._v("\nENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH")])]),r._v(" "),e("li",[e("p",[r._v("7、ADD"),e("br"),r._v("\nADD 命令有两个参数，源和目标。它的基本作用是从源系统的文件系统上复制文件到目标容器的文件系统。如果源是一个 URL，那该 URL 的内容将被下载并复制到容器中。"),e("br"),r._v("\nADD [source directory or URL] [destination directory]"),e("br"),r._v("\nADD /my_app_folder /my_app_folder")])]),r._v(" "),e("li",[e("p",[r._v("8、ENTRYPOINT"),e("br"),r._v("\n两种格式："),e("br"),r._v("\nENTRYPOINT [“executable”, “param1”, “param2”]"),e("br"),r._v("\nENTRYPOINT command param1 param2 （shell 中执行）。"),e("br"),r._v("\n配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。"),e("br"),r._v("\n每个 Dockerfile 中只能有一个 ENTRYPOINT ，当指定多个时，只有最后一个起效。")])]),r._v(" "),e("li",[e("p",[r._v("9、VOLUME"),e("br"),r._v("\n格式为 VOLUME [“/data”] 。"),e("br"),r._v("\n创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。")])])]),r._v(" "),e("p",[r._v("11、USER"),e("br"),r._v("\n格式为 USER daemon 。"),e("br"),r._v("\n指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。"),e("br"),r._v("\n当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如： RUN groupadd -r postgres && useradd -r -g postgres postgres 。"),e("strong",[r._v("要临时获取管理员权限可以使用 gosu ，而不推荐 sudo 。")])]),r._v(" "),e("ul",[e("li",[e("p",[r._v("11、WORKDIR"),e("br"),r._v("\n格式为 WORKDIR /path/to/workdir 。"),e("br"),r._v("\n为后续的 RUN 、 CMD 、 ENTRYPOINT 指令配置工作目录。"),e("br"),r._v("\n可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如"),e("br"),r._v("\nWORKDIR /a"),e("br"),r._v("\nWORKDIR b"),e("br"),r._v("\nWORKDIR c"),e("br"),r._v("\nRUN pwd"),e("br"),r._v("\n则最终路径为 /a/b/c 。")])]),r._v(" "),e("li",[e("p",[r._v("12、ONBUILD"),e("br"),r._v("\n格式为 ONBUILD [INSTRUCTION] 。"),e("br"),r._v("\n配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。"),e("br"),r._v("\n例如，Dockerfile 使用如下的内容创建了镜像 image-A 。")])])]),r._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("[")]),r._v("…"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("]")]),r._v(" \nONBUILD ADD "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[r._v(".")]),r._v(" /app/src \nONBUILD RUN /usr/local/bin/python-build –dir /app/src \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("[")]),r._v("…"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("]")]),r._v(" \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#如果基于A创建新的镜像时，新的Dockerfile中使用 FROM image-A")]),r._v("\n 指定基础镜像时，会自动执行 ONBUILD 指令内容，\n等价于在后面添加了两条指令。\nFROM image-A\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#Automatically run the following")]),r._v("\nADD "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[r._v(".")]),r._v(" /app/src\nRUN /usr/local/bin/python-build --dir /app/src\n")])]),r._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[r._v("1")]),e("br"),e("span",{staticClass:"line-number"},[r._v("2")]),e("br"),e("span",{staticClass:"line-number"},[r._v("3")]),e("br"),e("span",{staticClass:"line-number"},[r._v("4")]),e("br"),e("span",{staticClass:"line-number"},[r._v("5")]),e("br"),e("span",{staticClass:"line-number"},[r._v("6")]),e("br"),e("span",{staticClass:"line-number"},[r._v("7")]),e("br"),e("span",{staticClass:"line-number"},[r._v("8")]),e("br"),e("span",{staticClass:"line-number"},[r._v("9")]),e("br"),e("span",{staticClass:"line-number"},[r._v("10")]),e("br"),e("span",{staticClass:"line-number"},[r._v("11")]),e("br")])]),e("p",[r._v("使用 ONBUILD 指令的镜像，推荐在标签中注明，例如 ruby:1.9-onbuild 。")]),r._v(" "),e("ul",[e("li",[r._v("13 CMD 和 ENTRYPOINT 差异对比"),e("br"),r._v("\n两个共同点："),e("br"),r._v("\n都可以指定 shell 或 exec 函数调用的方式执行命令；"),e("br"),r._v("\n当存在多个 CMD 指令或 ENTRYPOINT 指令时，只有最后一个生效；"),e("br"),r._v("\n差异："),e("br"),r._v("\n差异 1：CMD 指令指定的容器启动时命令可以被 docker run 指定的命令覆盖，而 ENTRYPOINT 指令指定的命令不能被覆盖，而是将 docker run 指定的参数当做 ENTRYPOINT 指定命令的参数。"),e("br"),r._v("\n差异 2：CMD 指令可以为 ENTRYPOINT 指令设置默认参数，而且可以被 docker run 指定的参数覆盖；")])]),r._v(" "),e("blockquote",[e("p",[r._v("ENTRYPOINT 　"),e("br"),r._v("\nAn ENTRYPOINT allows you to configure a container that will run as an executable.它可以让你的容器功能表现得像一个可执行程序一样。")]),r._v(" "),e("blockquote",[e("ul",[e("li",[r._v("例子一："),e("br"),r._v("\n使用下面的 ENTRYPOINT 构造镜像:"),e("br"),r._v('\nENTRYPOINT ["/bin/echo"]'),e("br"),r._v("\n那么 docker build 出来的镜像以后的容器功能就像一个/bin/echo 程序："),e("br"),r._v("\n比如我 build 出来的镜像名称叫 imageecho，那么我可以这样用它："),e("br"),r._v("\ndocker run -it imageecho “this is a test”"),e("br"),r._v("\n这里就会输出”this is a test”这串字符，而这个 imageecho 镜像对应的容器表现出来的功能就像一个 echo 程序一样。 你添加的参数“this is a test”会添加到 ENTRYPOINT 后面，就成了这样　/bin/echo “this is a test” 。现在你应该明白进入点的意思了吧。")]),r._v(" "),e("li",[r._v("例子二："),e("br"),r._v('\nENTRYPOINT ["/bin/cat"]'),e("br"),r._v("\n构造出来的镜像你可以这样运行(假设名为 st)："),e("br"),r._v("\ndocker run -it st /etc/fstab"),e("br"),r._v("\n这样相当： /bin/cat /etc/fstab 这个命令的作用。运行之后就输出/etc/fstab 里的内容。")])])])]),r._v(" "),e("p",[r._v("6.3 镜像构建实战")]),r._v(" "),e("h3",{attrs:{id:"docker-实战-编写-dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-实战-编写-dockerfile"}},[r._v("#")]),r._v(" "),e("a",{attrs:{href:"https://www.baidu.com/link?url=Txd6HF2sXm6ny96Fjxt-N3s5dttG95iZVSuRWtIrXvX89AX_aPaS3cRwHcBTD-JmkqeUeDlJSpewjssg6y-vZ9vK1JcdTFmhBF8rf6uXkC_&wd=&eqid=ba06d5a70003473c000000025b1f9ae9",target:"_blank",rel:"noopener noreferrer"}},[e("em",[r._v("Docker_实战-编写_Dockerfile")]),e("OutboundLink")],1)]),r._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("[")]),r._v("root@docker docker_demo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# cat Dockerfile ")]),r._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# base image")]),r._v("\nFROM centos\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# MAINTAINER")]),r._v("\nMAINTAINER json_hc@"),e("span",{pre:!0,attrs:{class:"token number"}},[r._v("163.")]),r._v("com\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# put nginx-1.12.2.tar.gz into /usr/local/src and unpack nginx")]),r._v("\nADD nginx"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[r._v("1.12")]),e("span",{pre:!0,attrs:{class:"token number"}},[r._v(".2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(".")]),r._v("tar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(".")]),r._v("gz "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("usr"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("local"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("src\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# running required command")]),r._v("\nRUN yum install "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("y gcc gcc"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("c"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("+")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("+")]),r._v(" glibc make autoconf openssl openssl"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("devel \nRUN yum install "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("y libxslt"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("devel "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("y gd gd"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("devel GeoIP \\\n GeoIP"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("devel pcre pcre"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("devel\nRUN useradd "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("M "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("s "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("sbin"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("nologin nginx\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# mount a dir to container")]),r._v("\nONBUILD VOLUME "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[r._v('"/data"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("]")]),r._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# change dir to /usr/local/src/nginx-1.12.2")]),r._v("\nWORKDIR "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("usr"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("local"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("src"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("nginx"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[r._v("1.12")]),e("span",{pre:!0,attrs:{class:"token number"}},[r._v(".2")]),r._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# execute command to compile nginx")]),r._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(".")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("configure "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("user"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),r._v("nginx "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("group"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),r._v("nginx "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("prefix"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("usr"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("local"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("nginx \\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[r._v("file")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("aio  "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_ssl_module  "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_realip_module    \\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_addition_module    "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_xslt_module  \\\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_image_filter_module    "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_geoip_module  \\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_sub_module  "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_dav_module \\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_flv_module    "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_mp4_module \\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_gunzip_module  "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_gzip_static_module  \\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_auth_request_module  "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_random_index_module  \\\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_secure_link_module   "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_degradation_module  \\\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("with")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("-")]),r._v("http_stub_status_module "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("&")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("&")]),r._v(" make "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("&")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("&")]),r._v(" make install\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# setup PATH")]),r._v("\nENV PATH "),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("usr"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("local"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("nginx"),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("sbin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(":")]),r._v("$PATH\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# EXPOSE")]),r._v("\nEXPOSE "),e("span",{pre:!0,attrs:{class:"token number"}},[r._v("80")]),r._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# the command of entrypoint")]),r._v("\nENTRYPOINT "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[r._v('"nginx"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("]")]),r._v("\n\nCMD "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[r._v('"-g"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("]")]),r._v("\n")])]),r._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[r._v("1")]),e("br"),e("span",{staticClass:"line-number"},[r._v("2")]),e("br"),e("span",{staticClass:"line-number"},[r._v("3")]),e("br"),e("span",{staticClass:"line-number"},[r._v("4")]),e("br"),e("span",{staticClass:"line-number"},[r._v("5")]),e("br"),e("span",{staticClass:"line-number"},[r._v("6")]),e("br"),e("span",{staticClass:"line-number"},[r._v("7")]),e("br"),e("span",{staticClass:"line-number"},[r._v("8")]),e("br"),e("span",{staticClass:"line-number"},[r._v("9")]),e("br"),e("span",{staticClass:"line-number"},[r._v("10")]),e("br"),e("span",{staticClass:"line-number"},[r._v("11")]),e("br"),e("span",{staticClass:"line-number"},[r._v("12")]),e("br"),e("span",{staticClass:"line-number"},[r._v("13")]),e("br"),e("span",{staticClass:"line-number"},[r._v("14")]),e("br"),e("span",{staticClass:"line-number"},[r._v("15")]),e("br"),e("span",{staticClass:"line-number"},[r._v("16")]),e("br"),e("span",{staticClass:"line-number"},[r._v("17")]),e("br"),e("span",{staticClass:"line-number"},[r._v("18")]),e("br"),e("span",{staticClass:"line-number"},[r._v("19")]),e("br"),e("span",{staticClass:"line-number"},[r._v("20")]),e("br"),e("span",{staticClass:"line-number"},[r._v("21")]),e("br"),e("span",{staticClass:"line-number"},[r._v("22")]),e("br"),e("span",{staticClass:"line-number"},[r._v("23")]),e("br"),e("span",{staticClass:"line-number"},[r._v("24")]),e("br"),e("span",{staticClass:"line-number"},[r._v("25")]),e("br"),e("span",{staticClass:"line-number"},[r._v("26")]),e("br"),e("span",{staticClass:"line-number"},[r._v("27")]),e("br"),e("span",{staticClass:"line-number"},[r._v("28")]),e("br"),e("span",{staticClass:"line-number"},[r._v("29")]),e("br"),e("span",{staticClass:"line-number"},[r._v("30")]),e("br"),e("span",{staticClass:"line-number"},[r._v("31")]),e("br"),e("span",{staticClass:"line-number"},[r._v("32")]),e("br"),e("span",{staticClass:"line-number"},[r._v("33")]),e("br"),e("span",{staticClass:"line-number"},[r._v("34")]),e("br"),e("span",{staticClass:"line-number"},[r._v("35")]),e("br"),e("span",{staticClass:"line-number"},[r._v("36")]),e("br"),e("span",{staticClass:"line-number"},[r._v("37")]),e("br"),e("span",{staticClass:"line-number"},[r._v("38")]),e("br"),e("span",{staticClass:"line-number"},[r._v("39")]),e("br"),e("span",{staticClass:"line-number"},[r._v("40")]),e("br"),e("span",{staticClass:"line-number"},[r._v("41")]),e("br"),e("span",{staticClass:"line-number"},[r._v("42")]),e("br"),e("span",{staticClass:"line-number"},[r._v("43")]),e("br"),e("span",{staticClass:"line-number"},[r._v("44")]),e("br")])]),e("p",[r._v("第 7 章 Docker 仓库"),e("br"),r._v("\n7.1 官方仓库 Docker Hub"),e("br"),r._v("\n7.2 国内镜像仓库"),e("br"),r._v("\n7.3 私有仓库"),e("br"),r._v("\n7.4 Registry 原理"),e("br"),r._v("\n7.5 本章小结"),e("br"),r._v("\n第 8 章 Docker 容器"),e("br"),r._v("\n8.1 容器基本操作"),e("br"),r._v("\n8.2 进入容器内部"),e("br"),r._v("\n8.3 导出和导入容器"),e("br"),r._v("\n8.4 容器结构"),e("br"),r._v("\n8.5 本章小结"),e("br"),r._v("\n第 9 章 数据卷"),e("br"),r._v("\n9.1 数据卷是什么"),e("br"),r._v("\n9.2 为容器挂载数据卷"),e("br"),r._v("\n9.3 备份、恢复、迁移数据卷"),e("br"),r._v("\n9.4 容器数据卷扩展"),e("br"),r._v("\n9.5 本章小结"),e("br"),r._v("\n第 10 章 网络管理"),e("br"),r._v("\n10.1 Docker 网络基础"),e("br"),r._v("\n10.2 Docker 网络模式"),e("br"),r._v("\n10.3 Docker 网络配置"),e("br"),r._v("\n10.4 本章小结"),e("br"),r._v("\n第 3 篇 Docker 进阶实战"),e("br"),r._v("\n第 11 章 操作系统"),e("br"),r._v("\n11.1 Alpine 发行版"),e("br"),r._v("\n11.2 Busybox 发行版"),e("br"),r._v("\n11.3 Debian/Ubuntu 发行版"),e("br"),r._v("\n11.4 CentOS/Fedora 发行版"),e("br"),r._v("\n11.5 CoreOS 发行版"),e("br"),r._v("\n11.6 RancherOS 发行版"),e("br"),r._v("\n11.7 本章小结"),e("br"),r._v("\n第 12 章 编排工具 Compose"),e("br"),r._v("\n12.1 安装 Docker Compose"),e("br"),r._v("\n12.2 Compose 命令基础"),e("br"),r._v("\n12.3 Compose 配置文件"),e("br"),r._v("\n12.4 Compose 实战"),e("br"),r._v("\n12.5 本章小结"),e("br"),r._v("\n第 13 章 Web 服务器与应用"),e("br"),r._v("\n13.1 Apache 服务器"),e("br"),r._v("\n13.2 Nginx 服务器"),e("br"),r._v("\n13.3 Tomcat 服务器"),e("br"),r._v("\n13.4 其他 Web 服务器"),e("br"),r._v("\n13.5 本章小结"),e("br"),r._v("\n第 14 章 数据库"),e("br"),r._v("\n14.1 MySQL 数据库"),e("br"),r._v("\n14.2 PostgreSQL 数据库"),e("br"),r._v("\n14.3 Redis 数据库"),e("br"),r._v("\n14.4 MongoDB 数据库"),e("br"),r._v("\n14.5 其他"),e("br"),r._v("\n14.6 本章小结"),e("br"),r._v("\n第 15 章 编程语言"),e("br"),r._v("\n15.1 C/C++语言"),e("br"),r._v("\n15.2 Golang 语言"),e("br"),r._v("\n15.3 Java 语言"),e("br"),r._v("\n15.4 JavaScript（Node.js）语言"),e("br"),r._v("\n15.5 PHP 语言"),e("br"),r._v("\n15.6 Python 语言"),e("br"),r._v("\n15.7 Swift 语言"),e("br"),r._v("\n15.8 本章小结"),e("br"),r._v("\n第 16 章 Docker API 介绍"),e("br"),r._v("\n16.1 认识 Docker API"),e("br"),r._v("\n16.2 Docker Remote API 介绍"),e("br"),r._v("\n16.3 其他 API"),e("br"),r._v("\n16.4 本章小结"),e("br"),r._v("\n第 17 章 私有仓库"),e("br"),r._v("\n17.1 Docker Registry 介绍"),e("br"),r._v("\n17.2 认证与前端"),e("br"),r._v("\n17.3 企业级私有仓库 Harbor"),e("br"),r._v("\n17.4 私有仓库前端授权工具 Portus"),e("br"),r._v("\n17.5 本章小结"),e("br"),r._v("\n第 18 章 集群网络"),e("br"),r._v("\n第 19 章 Docker 安全")])])}),[],!1,null,null,null);n.default=t.exports}}]);